name: 🧪 Evaluaciones Automáticas (Evals)

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'server/**'
      - 'evals/**'
      - 'package.json'
      - 'tsconfig.json'
  push:
    branches: [ main, develop ]
    paths:
      - 'server/**'
      - 'evals/**'
      - 'package.json'
      - 'tsconfig.json'

jobs:
  evals:
    name: 🧪 Ejecutar Evaluaciones
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 📦 Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📦 Instalar dependencias
      run: npm ci
      
    - name: 🔧 Compilar TypeScript
      run: npm run build
      
    - name: 🎭 Ejecutar evaluaciones de tono
      run: npm run evals:tone

    - name: ⚡ Ejecutar evaluaciones de latencia
      run: npm run evals:latency

    - name: 🧪 Ejecutar evaluaciones de exactitud
      continue-on-error: true
      run: npm run evals:accuracy
      env:
        OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}

    - name: 📊 Generar reporte completo
      continue-on-error: true
      run: npm run evals:all
      env:
        OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        
    - name: 📋 Subir reporte como artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: evals-report
        path: evals/reports/latest-report.json
        
    - name: 📊 Comentar en PR con resultados
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const reportPath = path.join('evals', 'reports', 'latest-report.json');
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            
            const { overall, metrics } = report;
            
            let comment = `## 🧪 Resultados de Evaluaciones Automáticas\n\n`;
            comment += `### 📊 Puntuación General: **${overall.percentage.toFixed(1)}%** (${overall.score}/${overall.maxScore})\n\n`;
            
            comment += `### 📈 Métricas Detalladas:\n`;
            metrics.forEach(metric => {
              const emoji = metric.percentage >= 90 ? '🟢' : metric.percentage >= 75 ? '🟡' : '🔴';
              comment += `- ${emoji} **${metric.metric}**: ${metric.percentage.toFixed(1)}%\n`;
            });
            
            comment += `\n### 📝 Resumen:\n${report.summary}\n\n`;
            
            if (overall.percentage < 75) {
              comment += `⚠️ **Atención**: La puntuación general es menor al 75%. Se recomienda revisar los resultados antes de hacer merge.\n`;
            } else {
              comment += `✅ **Excelente**: La puntuación general es satisfactoria. El agente está listo para producción.\n`;
            }
            
            comment += `\n---\n*Reporte generado automáticamente por el sistema de evaluaciones*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Error generando comentario:', error);
          }
          
    - name: ❌ Fallar si las evaluaciones no pasan
      if: failure()
      run: |
        echo "❌ Las evaluaciones fallaron. Revisa los logs para más detalles."
        echo "💡 Tip: Asegúrate de que la API key de OpenWeather esté configurada correctamente."
        exit 1
